[
    {
        "visualName": "Activation",
        "exp": "Applies an activation function to an output.",
        "category": "Basic",
        "funName": "activation",
        "args": [
            {
                "visualName": "Activation function",
                "exp": "Activation function to use.",
                "argName": "activation",
                "type": "select",
                "values": [
                    "elu",
                    "hardSigmoid",
                    "linear",
                    "relu",
                    "relu6",
                    "selu",
                    "sigmoid",
                    "softmax",
                    "softplus",
                    "softsign",
                    "tanh",
                    "swish",
                    "mish",
                    "gelu",
                    "gelu_new"
                ]
            }
        ]
    },
    {
        "visualName": "Dense",
        "exp": "Default simple layer of nodes.",
        "category": "Basic",
        "funName": "dense",
        "args": [
            {
                "visualName": "Units",
                "exp": "Positive integer, dimensionality of the output space.",
                "argName": "units",
                "type": "number",
                "values": "N"
            },
            {
                "visualName": "Activation function",
                "exp": "Activation function to use.",
                "argName": "activation",
                "type": "select",
                "values": [
                    null,
                    "elu",
                    "hardSigmoid",
                    "linear",
                    "relu",
                    "relu6",
                    "selu",
                    "sigmoid",
                    "softmax",
                    "softplus",
                    "softsign",
                    "tanh",
                    "swish",
                    "mish",
                    "gelu",
                    "gelu_new"
                ],
                "default": null
            },
            {
                "visualName": "Use Bias",
                "exp": "Whether to apply a bias.",
                "argName": "useBias",
                "type": "checkbox",
                "default": false
            },
            {
                "visualName": "Kernel Initializer",
                "exp": "Initializer for the dense kernel weights matrix.",
                "argName": "kernelInitializer",
                "type": "select",
                "values": [
                    null,
                    "constant",
                    "glorotNormal",
                    "glorotUniform",
                    "heNormal",
                    "heUniform",
                    "identical",
                    "leCunNormal",
                    "leCunUniform",
                    "ones",
                    "orthogonal",
                    "randomNormal",
                    "randomUniform",
                    "truncatedNormal",
                    "varianceScaling",
                    "zeros"
                ],
                "default": null
            },
            {
                "visualName": "Bias Initializer",
                "exp": "Initializer for the bias vector.",
                "argName": "biasInitializer",
                "type": "select",
                "values": [
                    null,
                    "constant",
                    "glorotNormal",
                    "glorotUniform",
                    "heNormal",
                    "heUniform",
                    "identical",
                    "leCunNormal",
                    "leCunUniform",
                    "ones",
                    "orthogonal",
                    "randomNormal",
                    "randomUniform",
                    "truncatedNormal",
                    "varianceScaling",
                    "zeros"
                ],
                "default": null
            },
            {
                "visualName": "Kernel Constraint",
                "exp": "Constraint for the kernel weights.",
                "argName": "kernelConstraint",
                "type": "select",
                "values": [
                    null,
                    "maxNorm",
                    "minMaxNorm",
                    "nonNeg",
                    "unitNorm"
                ],
                "default": null
            },
            {
                "visualName": "Bias Constraint",
                "exp": "Constraint for the bias vector.",
                "argName": "biasConstraint",
                "type": "select",
                "values": [
                    null,
                    "maxNorm",
                    "minMaxNorm",
                    "nonNeg",
                    "unitNorm"
                ],
                "default": null
            }
        ]
    },
    {
        "visualName": "Dropout",
        "exp": "Dropout consists in randomly setting a fraction rate of input units to 0 at each update during training time, which helps prevent overfitting.",
        "category": "Basic",
        "funName": "dropout",
        "args": [
            {
                "visualName": "Rate",
                "exp": "Fraction of the input units to drop.",
                "argName": "rate",
                "type": "number",
                "values": "%"
            },
            {
                "visualName": "Seed",
                "exp": "An integer to use as random seed.",
                "argName": "seed",
                "type": "number",
                "values": "Z",
                "default": null
            }
        ]
    },
    {
        "visualName": "Flatten",
        "exp": "Flattens the input to 1D. Does not affect the batch size.",
        "category": "Basic",
        "funName": "flatten",
        "args": []
    },
    {
        "visualName": "Rescaling",
        "exp": "A preprocessing layer which rescales input values to a new range.",
        "category": "Rescaling",
        "funName": "rescaling",
        "args": [
            {
                "visualName": "Scale",
                "exp": "The scale factor.",
                "argName": "scale",
                "type": "number",
                "values": "R"
            },
            {
                "visualName": "Offset",
                "exp": "The offset.",
                "argName": "offset",
                "type": "number",
                "values": "R"
            }
        ]
    },
    {
        "visualName": "1D Convolution",
        "exp": "This layer creates a convolution kernel that is convolved with the layer input over a single spatial (or temporal) dimension to produce a tensor of outputs.",
        "category": "Convolution",
        "funName": "conv1d",
        "args": [
            {
                "visualName": "Filters",
                "exp": "The dimensionality of the output space (i.e. the number of filters in the convolution).",
                "argName": "filters",
                "type": "number"
            },
            {
                "visualName": "Padding",
                "exp": "Padding mode.",
                "argName": "padding",
                "type": "select",
                "values": [
                    null,
                    "valid",
                    "same",
                    "casual"
                ],
                "default": null
            },
            {
                "visualName": "Activation",
                "exp": "Activation function to use.",
                "argName": "activation",
                "type": "select",
                "values": [
                    null,
                    "elu",
                    "hardSigmoid",
                    "linear",
                    "relu",
                    "relu6",
                    "selu",
                    "sigmoid",
                    "softmax",
                    "softplus",
                    "softsign",
                    "tanh",
                    "swish",
                    "mish",
                    "gelu",
                    "gelu_new"
                ],
                "default": null
            },
            {
                "visualName": "Use Bias",
                "exp": "Whether to apply a bias.",
                "argName": "useBias",
                "type": "checkbox",
                "default": true
            },
            {
                "visualName": "Kernel Initializer",
                "exp": "Initializer for the dense kernel weights matrix.",
                "argName": "kernelInitializer",
                "type": "select",
                "values": [
                    null,
                    "constant",
                    "glorotNormal",
                    "glorotUniform",
                    "heNormal",
                    "heUniform",
                    "identical",
                    "leCunNormal",
                    "leCunUniform",
                    "ones",
                    "orthogonal",
                    "randomNormal",
                    "randomUniform",
                    "truncatedNormal",
                    "varianceScaling",
                    "zeros"
                ],
                "default": null
            },
            {
                "visualName": "Bias Initializer",
                "exp": "Initializer for the bias vector.",
                "argName": "biasInitializer",
                "type": "select",
                "values": [
                    null,
                    "constant",
                    "glorotNormal",
                    "glorotUniform",
                    "heNormal",
                    "heUniform",
                    "identical",
                    "leCunNormal",
                    "leCunUniform",
                    "ones",
                    "orthogonal",
                    "randomNormal",
                    "randomUniform",
                    "truncatedNormal",
                    "varianceScaling",
                    "zeros"
                ],
                "default": null
            },
            {
                "visualName": "Kernel Constraint",
                "exp": "Constraint for the kernel weights.",
                "argName": "kernelConstraint",
                "type": "select",
                "values": [
                    null,
                    "maxNorm",
                    "minMaxNorm",
                    "nonNeg",
                    "unitNorm"
                ],
                "default": null
            },
            {
                "visualName": "Bias Initializer",
                "exp": "Constraint for the bias vector.",
                "argName": "biasConstraint",
                "type": "select",
                "values": [
                    null,
                    "maxNorm",
                    "minMaxNorm",
                    "nonNeg",
                    "unitNorm"
                ],
                "default": null
            }
        ]
    },
    {
        "visualName": "2D Convolution",
        "exp": "This layer creates a convolution kernel that is convolved with the layer input to produce a tensor of outputs.",
        "category": "Convolution",
        "funName": "conv2d",
        "args": [
            {
                "visualName": "Filters",
                "exp": "The dimensionality of the output space (i.e. the number of filters in the convolution).",
                "argName": "filters",
                "type": "number"
            },
            {
                "visualName": "Padding",
                "exp": "Padding mode.",
                "argName": "padding",
                "type": "select",
                "values": [
                    null,
                    "valid",
                    "same",
                    "casual"
                ],
                "default": null
            },
            {
                "visualName": "Activation",
                "exp": "Activation function to use.",
                "argName": "activation",
                "type": "select",
                "values": [
                    null,
                    "elu",
                    "hardSigmoid",
                    "linear",
                    "relu",
                    "relu6",
                    "selu",
                    "sigmoid",
                    "softmax",
                    "softplus",
                    "softsign",
                    "tanh",
                    "swish",
                    "mish",
                    "gelu",
                    "gelu_new"
                ],
                "default": null
            },
            {
                "visualName": "Use Bias",
                "exp": "Whether to apply a bias.",
                "argName": "useBias",
                "type": "checkbox",
                "default": true
            },
            {
                "visualName": "Kernel Initializer",
                "exp": "Initializer for the dense kernel weights matrix.",
                "argName": "kernelInitializer",
                "type": "select",
                "values": [
                    null,
                    "constant",
                    "glorotNormal",
                    "glorotUniform",
                    "heNormal",
                    "heUniform",
                    "identical",
                    "leCunNormal",
                    "leCunUniform",
                    "ones",
                    "orthogonal",
                    "randomNormal",
                    "randomUniform",
                    "truncatedNormal",
                    "varianceScaling",
                    "zeros"
                ],
                "default": null
            },
            {
                "visualName": "Bias Initializer",
                "exp": "Initializer for the bias vector.",
                "argName": "biasInitializer",
                "type": "select",
                "values": [
                    null,
                    "constant",
                    "glorotNormal",
                    "glorotUniform",
                    "heNormal",
                    "heUniform",
                    "identical",
                    "leCunNormal",
                    "leCunUniform",
                    "ones",
                    "orthogonal",
                    "randomNormal",
                    "randomUniform",
                    "truncatedNormal",
                    "varianceScaling",
                    "zeros"
                ],
                "default": null
            },
            {
                "visualName": "Kernel Constraint",
                "exp": "Constraint for the kernel weights.",
                "argName": "kernelConstraint",
                "type": "select",
                "values": [
                    null,
                    "maxNorm",
                    "minMaxNorm",
                    "nonNeg",
                    "unitNorm"
                ],
                "default": null
            },
            {
                "visualName": "Bias Initializer",
                "exp": "Constraint for the bias vector.",
                "argName": "biasConstraint",
                "type": "select",
                "values": [
                    null,
                    "maxNorm",
                    "minMaxNorm",
                    "nonNeg",
                    "unitNorm"
                ],
                "default": null
            }
        ]
    },
    {
        "visualName": "2D Deconvolution",
        "exp": "The need for transposed convolutions generally arises from the desire to use a transformation going in the opposite direction of a normal convolution, i.e., from something that has the shape of the output of some convolution to something that has the shape of its input while maintaining a connectivity pattern that is compatible with said convolution.",
        "category": "Convolution",
        "funName": "conv2dTranspose",
        "args": [
            {
                "visualName": "Filters",
                "exp": "The dimensionality of the output space (i.e. the number of filters in the convolution).",
                "argName": "filters",
                "type": "number"
            },
            {
                "visualName": "Padding",
                "exp": "Padding mode.",
                "argName": "padding",
                "type": "select",
                "values": [
                    null,
                    "valid",
                    "same",
                    "casual"
                ],
                "default": null
            },
            {
                "visualName": "Activation",
                "exp": "Activation function to use.",
                "argName": "activation",
                "type": "select",
                "values": [
                    null,
                    "elu",
                    "hardSigmoid",
                    "linear",
                    "relu",
                    "relu6",
                    "selu",
                    "sigmoid",
                    "softmax",
                    "softplus",
                    "softsign",
                    "tanh",
                    "swish",
                    "mish",
                    "gelu",
                    "gelu_new"
                ],
                "default": null
            },
            {
                "visualName": "Use Bias",
                "exp": "Whether to apply a bias.",
                "argName": "useBias",
                "type": "checkbox",
                "default": true
            },
            {
                "visualName": "Kernel Initializer",
                "exp": "Initializer for the dense kernel weights matrix.",
                "argName": "kernelInitializer",
                "type": "select",
                "values": [
                    null,
                    "constant",
                    "glorotNormal",
                    "glorotUniform",
                    "heNormal",
                    "heUniform",
                    "identical",
                    "leCunNormal",
                    "leCunUniform",
                    "ones",
                    "orthogonal",
                    "randomNormal",
                    "randomUniform",
                    "truncatedNormal",
                    "varianceScaling",
                    "zeros"
                ],
                "default": null
            },
            {
                "visualName": "Bias Initializer",
                "exp": "Initializer for the bias vector.",
                "argName": "biasInitializer",
                "type": "select",
                "values": [
                    null,
                    "constant",
                    "glorotNormal",
                    "glorotUniform",
                    "heNormal",
                    "heUniform",
                    "identical",
                    "leCunNormal",
                    "leCunUniform",
                    "ones",
                    "orthogonal",
                    "randomNormal",
                    "randomUniform",
                    "truncatedNormal",
                    "varianceScaling",
                    "zeros"
                ],
                "default": null
            },
            {
                "visualName": "Kernel Constraint",
                "exp": "Constraint for the kernel weights.",
                "argName": "kernelConstraint",
                "type": "select",
                "values": [
                    null,
                    "maxNorm",
                    "minMaxNorm",
                    "nonNeg",
                    "unitNorm"
                ],
                "default": null
            },
            {
                "visualName": "Bias Initializer",
                "exp": "Constraint for the bias vector.",
                "argName": "biasConstraint",
                "type": "select",
                "values": [
                    null,
                    "maxNorm",
                    "minMaxNorm",
                    "nonNeg",
                    "unitNorm"
                ],
                "default": null
            }
        ]
    },
    {
        "visualName": "3D Convolution",
        "exp": "This layer creates a convolution kernel that is convolved with the layer input to produce a tensor of outputs.",
        "category": "Convolution",
        "funName": "conv3d",
        "args": [
            {
                "visualName": "Filters",
                "exp": "The dimensionality of the output space (i.e. the number of filters in the convolution).",
                "argName": "filters",
                "type": "number"
            },
            {
                "visualName": "Padding",
                "exp": "Padding mode.",
                "argName": "padding",
                "type": "select",
                "values": [
                    null,
                    "valid",
                    "same",
                    "casual"
                ],
                "default": null
            },
            {
                "visualName": "Activation",
                "exp": "Activation function to use.",
                "argName": "activation",
                "type": "select",
                "values": [
                    null,
                    "elu",
                    "hardSigmoid",
                    "linear",
                    "relu",
                    "relu6",
                    "selu",
                    "sigmoid",
                    "softmax",
                    "softplus",
                    "softsign",
                    "tanh",
                    "swish",
                    "mish",
                    "gelu",
                    "gelu_new"
                ],
                "default": null
            },
            {
                "visualName": "Use Bias",
                "exp": "Whether to apply a bias.",
                "argName": "useBias",
                "type": "checkbox",
                "default": true
            },
            {
                "visualName": "Kernel Initializer",
                "exp": "Initializer for the dense kernel weights matrix.",
                "argName": "kernelInitializer",
                "type": "select",
                "values": [
                    null,
                    "constant",
                    "glorotNormal",
                    "glorotUniform",
                    "heNormal",
                    "heUniform",
                    "identical",
                    "leCunNormal",
                    "leCunUniform",
                    "ones",
                    "orthogonal",
                    "randomNormal",
                    "randomUniform",
                    "truncatedNormal",
                    "varianceScaling",
                    "zeros"
                ],
                "default": null
            },
            {
                "visualName": "Bias Initializer",
                "exp": "Initializer for the bias vector.",
                "argName": "biasInitializer",
                "type": "select",
                "values": [
                    null,
                    "constant",
                    "glorotNormal",
                    "glorotUniform",
                    "heNormal",
                    "heUniform",
                    "identical",
                    "leCunNormal",
                    "leCunUniform",
                    "ones",
                    "orthogonal",
                    "randomNormal",
                    "randomUniform",
                    "truncatedNormal",
                    "varianceScaling",
                    "zeros"
                ],
                "default": null
            },
            {
                "visualName": "Kernel Constraint",
                "exp": "Constraint for the kernel weights.",
                "argName": "kernelConstraint",
                "type": "select",
                "values": [
                    null,
                    "maxNorm",
                    "minMaxNorm",
                    "nonNeg",
                    "unitNorm"
                ],
                "default": null
            },
            {
                "visualName": "Bias Initializer",
                "exp": "Constraint for the bias vector.",
                "argName": "biasConstraint",
                "type": "select",
                "values": [
                    null,
                    "maxNorm",
                    "minMaxNorm",
                    "nonNeg",
                    "unitNorm"
                ],
                "default": null
            }
        ]
    },
    {
        "visualName": "1D Average Pooling",
        "exp": "Average pooling operation for spatial data.",
        "category": "Pooling",
        "funName": "averagePooling1d",
        "args": [
            {
                "visualName": "Pool Size",
                "exp": "Size of the window to pool over, should be an integer.",
                "argName": "poolSize",
                "type": "number",
                "values": "Z"
            },
            {
                "visualName": "Strides",
                "exp": "Period at which to sample the pooled values. If null, defaults to poolSize.",
                "argName": "strides",
                "type": "number",
                "values": "Z",
                "default": null
            },
            {
                "visualName": "Padding",
                "exp": "How to fill in data that's not an integer multiple of poolSize.",
                "argName": "padding",
                "type": "select",
                "values": [
                    "valid",
                    "same",
                    "casual"
                ]
            }
        ]
    },
    {
        "visualName": "2D Average Pooling",
        "exp": "Max pooling operation for spatial data.",
        "category": "Pooling",
        "funName": "averagePooling2d",
        "args": [
            {
                "visualName": "Pool Size",
                "exp": "Factors by which to downscale in each dimension [vertical, horizontal].",
                "argName": "poolSize",
                "type": "[number, number]",
                "values": "Z"
            },
            {
                "visualName": "Strides",
                "exp": "The size of the stride in each dimension of the pooling window. If null, defaults to poolSize.",
                "argName": "strides",
                "type": "[number, number]",
                "values": "Z",
                "default": null
            },
            {
                "visualName": "Padding",
                "exp": "How to fill in data that's not an integer multiple of poolSize.",
                "argName": "padding",
                "type": "select",
                "values": [
                    "valid",
                    "same",
                    "casual"
                ]
            }
        ]
    },
    {
        "visualName": "3D Average Pooling",
        "exp": "Average pooling operation for 3D data.",
        "category": "Pooling",
        "funName": "averagePooling3d",
        "args": [
            {
                "visualName": "Pool Size",
                "exp": "Factors by which to downscale in each dimension [depth, height, width].",
                "argName": "poolSize",
                "type": "[number, number, number]",
                "values": "Z"
            },
            {
                "visualName": "Strides",
                "exp": "The size of the stride in each dimension of the pooling window. If null, defaults to poolSize.",
                "argName": "strides",
                "type": "[number, number, number]",
                "values": "Z",
                "default": null
            },
            {
                "visualName": "Padding",
                "exp": "How to fill in data that's not an integer multiple of poolSize.",
                "argName": "padding",
                "type": "select",
                "values": [
                    "valid",
                    "same",
                    "casual"
                ]
            }
        ]
    },
    {
        "visualName": "1D Global Average Pooling",
        "exp": "Global average pooling operation for temporal data.",
        "category": "Pooling",
        "funName": "globalAveragePooling1d",
        "args": []
    },
    {
        "visualName": "2D Global Average Pooling",
        "exp": "Global average pooling operation for spatial data.",
        "category": "Pooling",
        "funName": "globalAveragePooling2d",
        "args": []
    },
    {
        "visualName": "1D Global Max Pooling",
        "exp": "Global max pooling operation for temporal data.",
        "category": "Pooling",
        "funName": "globalMaxPooling1d",
        "args": []
    },
    {
        "visualName": "2D Global Max Pooling",
        "exp": "Global max pooling operation for spatial data.",
        "category": "Pooling",
        "funName": "globalMaxPooling1d",
        "args": []
    },
    {
        "visualName": "1D Max Pooling",
        "exp": "Max pooling operation for temporal data.",
        "category": "Pooling",
        "funName": "maxPooling1d",
        "args": [
            {
                "visualName": "Pool Size",
                "exp": "Size of the window to pool over, should be an integer.",
                "argName": "poolSize",
                "type": "number",
                "values": "Z"
            },
            {
                "visualName": "Strides",
                "exp": "Period at which to sample the pooled values. If null, defaults to poolSize.",
                "argName": "strides",
                "type": "number",
                "values": "Z",
                "default": null
            },
            {
                "visualName": "Padding",
                "exp": "How to fill in data that's not an integer multiple of poolSize.",
                "argName": "padding",
                "type": "select",
                "values": [
                    "valid",
                    "same",
                    "casual"
                ]
            }
        ]
    },
    {
        "visualName": "2D Max Pooling",
        "exp": "Max pooling operation for spatial data.",
        "category": "Pooling",
        "funName": "maxPooling2d",
        "args": [
            {
                "visualName": "Pool Size",
                "exp": "Factors by which to downscale in each dimension [vertical, horizontal].",
                "argName": "poolSize",
                "type": "[number, number]",
                "values": "Z"
            },
            {
                "visualName": "Strides",
                "exp": "The size of the stride in each dimension of the pooling window. If null, defaults to poolSize.",
                "argName": "strides",
                "type": "[number, number]",
                "values": "Z",
                "default": null
            },
            {
                "visualName": "Padding",
                "exp": "How to fill in data that's not an integer multiple of poolSize.",
                "argName": "padding",
                "type": "select",
                "values": [
                    "valid",
                    "same",
                    "casual"
                ]
            }
        ]
    },
    {
        "visualName": "3D Max Pooling",
        "exp": "Max pooling operation for 3D data.",
        "category": "Pooling",
        "funName": "maxPooling3d",
        "args": [
            {
                "visualName": "Pool Size",
                "exp": "Factors by which to downscale in each dimension [depth, height, width].",
                "argName": "poolSize",
                "type": "[number, number, number]",
                "values": "Z"
            },
            {
                "visualName": "Strides",
                "exp": "The size of the stride in each dimension of the pooling window. If null, defaults to poolSize.",
                "argName": "strides",
                "type": "[number, number, number]",
                "values": "Z",
                "default": null
            },
            {
                "visualName": "Padding",
                "exp": "How to fill in data that's not an integer multiple of poolSize.",
                "argName": "padding",
                "type": "select",
                "values": [
                    "valid",
                    "same",
                    "casual"
                ]
            }
        ]
    },
    {
        "visualName": "ELU",
        "exp": "Exponential Linear Unit. It follows: f(x) = alpha * (exp(x) - 1.) for x < 0, f(x) = x for x >= 0.",
        "category": "Advanced Activation",
        "funName": "elu",
        "args": [
            {
                "visualName": "Alpha",
                "exp": "Negative slope coefficient.",
                "argName": "alpha",
                "type": "number",
                "values": "R+",
                "default": 1.0
            }
        ]
    },
    {
        "visualName": "Leaky ReLU",
        "exp": "Leaky version of a Rectified Linear Unit. It allows a small gradient when the unit is not active: f(x) = alpha * x for x < 0. f(x) = x for x >= 0.",
        "category": "Advanced Activation",
        "funName": "leakyReLU",
        "args": [
            {
                "visualName": "Alpha",
                "exp": "Negative slope coefficient.",
                "argName": "alpha",
                "type": "number",
                "values": "R+",
                "default": 0.3
            }
        ]
    },
    {
        "visualName": "ReLU",
        "exp": "Rectified Linear Unit activation function.",
        "category": "Advanced Activation",
        "funName": "reLU",
        "args": [
            {
                "visualName": "Max Value",
                "exp": "Maximum output value.",
                "argName": "maxValue",
                "type": "number",
                "values": "R"
            }
        ]
    },
    {
        "visualName": "Thresholded ReLU",
        "exp": "Thresholded Rectified Linear Unit activation function. It follows: f(x) = x for x > theta, f(x) = 0 otherwise.",
        "category": "Advanced Activation",
        "funName": "thresholdedReLU",
        "args": [
            {
                "visualName": "Theta",
                "exp": "Threshold value for thresholded activation.",
                "argName": "theta",
                "type": "number",
                "values": "R+"
            }
        ]
    }
]