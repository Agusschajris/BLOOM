// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// DOWNLOAD PRISMA EXTENSION

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  // emailVerified     DateTime?
  username          String        @unique
  name              String
  professor         Boolean
  organization      String?
  projects          Project[]
  classes           Class[]       @relation("UserClasses")
  createdClasses    Class[]       @relation("OwnerClasses")
  datasets          Dataset[]
  accounts          Account[]
  sessions          Session[]
  // Optional for WebAuthn support
  Authenticator     Authenticator[]
 
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
 
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken      String        @unique
  userId            String
  expires           DateTime
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model VerificationToken {
  identifier        String
  token             String
  expires           DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String      @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Project { 
  id                Int           @id @default(autoincrement())
  name              String
  creationDate      DateTime      @default(now())
  lastEdited        DateTime?     @default(now()) @updatedAt
  blocks            Bytes
  owner             User          @relation(fields: [ownerId], references: [id])
  ownerId           String
  dataset           Dataset?      @relation(fields: [datasetId], references: [id])
  datasetId         Int
}

model Class {
  id                Int           @id @default(autoincrement())
  name              String
  owner             User          @relation("OwnerClasses", fields: [ownerId], references: [id])
  ownerId           String
  users             User[]        @relation("UserClasses")
  datasets          Dataset[]     @relation("ClassDatasets")
}

model Dataset {
  id                Int           @id @default(autoincrement())
  name              String?
  dataset           String        // URL
  user              User?         @relation(fields: [userId], references: [id])
  userId            String?
  projects          Project[]
  classes           Class[]       @relation("ClassDatasets")
}